1) В исходной папке создаем локальный репозиторий: git init -b main
2) Устанавливаем gh для быстрой настройки удаленного репозитория:
   а) Устанавливаем choco (powerShell от имени админа) и вводим эту команду: Set-ExecutionPolicy Bypass -Scope Process -Force; `
  iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
   б) choco install gh
3) Регаемся: gh auth login
4) Создаем репозиторий: gh repo create Zarudnev-Alexandr/mars --public
5) Поддягиваем на локалку: git pull ссылка_на_репозиторий(HTTPS) main

Установка PyEnv, только для первого раза-------------------------------
а) Устанавливаем pyenv-win: Invoke-WebRequest -UseBasicParsing -Uri "https://raw.githubusercontent.com/pyenv-win/pyenv-win/master/pyenv-win/install-pyenv-win.ps1" -OutFile "./install-pyenv-win.ps1"; &"./install-pyenv-win.ps1"
б) Перезапускаем powerShell и проверяем версию: pyenv --version
-----------------------------------------------------------------------

6) Создаем виртуальное окружение python -m venv env и через command promt входим: call env/scripts/activate
7) Устанавливаем модули из файла: pip install -r requirements.txt (в файле у нас лежал Django==версия)
8) Создаем django проект: django-admin startproject название проекта
9) Запускаем: python manage.py runserver
10) Наживаем на галочку справа сверху (PyCharm) и добавляем красные файлы. Затем коммитим.

11) Создаем приложение в каталоге с manage.py, чтоб потом его легко интегрировать: python manage.py startapp название_приложения
12) Создаем в каталоге нового приложения urls.py и подключаем в него все, что в нашем приложении
13) Создаем в psql базу данных: CREATE DATABASE имя_базы, таблички в ней создаем и все такое
14) Устанавливаем плагин psycopg2 и добавляем его в requirements.txt
15) Летим в settings.py и в словаре DATABASES:{'default':{}} пишем:
   'ENGINE': 'django.db.backends.postgresql',
   'NAME': 'mars_db',
   'USER': 'postgres',
   'PASSWORD': '2468',
   'HOST': 'localhost',
   'PORT': '5432'
16) Так же в settings.py устанавливаем TIME_ZONE на UTC+3
17) Прописываем python manage.py migrate и у нас заполниться подключенная бд. Данные подтянуться из моделек зарегистрированных приложений.
18) Заходим в models.py нашего приложения и прописываем таблички для нашей бд.
19) В settings.py (главном) добавляем наше новое приложение: INSTALLED_APPS = [...Все_что_уже_было, 'название_приложения.apps.название_класса_в_apps',] 
20) Сообщаем, что внесли изменения в модели: python manage.py makemirations название_приложения.
---Работа с API---
21) Вызываем оболочку Python: python manage.py shell.
22) Тут мы можем побпловаться и поредактировать бд:
   а) Импортируем наши таблички: from название_приложения.models import таблица1, таблица2.
   б) Смотрим, что в них есть: Question.objects.all().
   в) Импортируем модуль для работы с датой:from django.utils import timezone.
   г) Изменяем: переменная1 = таблица1(поле_charField="What's new?", дата=timezone.now()).
   д) Сохраняем: переменная1.save().
   е) Посмотрим id или поле: переменная1.id или переменная1.поле_charField.
   ж) Изменим конкретное поле: переменная1.поле_charField = "What's up?"
   з) Сохраним: переменная1юsave().

21) Создаем эти модели в нашей базе данных: python manage.py migrate.

